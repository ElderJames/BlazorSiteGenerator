{
  "Order": 1,
  "Title": "快速上手",
  "Html": "<p>Ant Design of Blazor 致力于提供给程序员<strong>愉悦</strong>的开发体验。</p>\n<blockquote>\n<p>在开始之前，推荐先学习 <a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/blazor/?WT.mc_id=DT-MVP-5003987\">Blazor</a> 和 <a href=\"https://docs.microsoft.com/zh-cn/dotnet?WT.mc_id=DT-MVP-5003987\">.Net Core</a>，并正确安装和配置了 <a href=\"https://dotnet.microsoft.com/download?WT.mc_id=DT-MVP-5003987\">.NET Core SDK</a> 3.1.300 或以上。官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的初级知识，并且已经完全掌握了 Blazor 的正确开发方式。如果你刚开始学习.NET 或者 Blazor，将 UI 框架作为你的第一步可能不是最好的主意。</p>\n</blockquote>\n<h2>第一个本地实例</h2>\n<p>实际项目开发中，你会需要对 C# 代码的构建、调试、代理、打包部署等一系列工程化的需求。\n我们强烈建议使用官方的 Visual Studio 2022 或者 VS Code 进行开发，下面我们用一个简单的实例来说明。</p>\n<h3>创建一个 Blazor WebAssembly 项目</h3>\n<blockquote>\n<p>在创建项目之前，请确保 <code>.NET Core SDK 8.0.100+</code> 已被成功安装。</p>\n</blockquote>\n<p>执行以下命令，<code>dotnet cli</code> 会在当前目录下新建一个名称为 <code>PROJECT-NAME</code> 的文件夹，并自动安装好相应依赖。</p>\n<pre><code class=\"language-bash\">$ dotnet new blazorwasm -o PROJECT-NAME\n</code></pre>\n<h3>开发调试</h3>\n<p>一键启动调试，运行成功后显示模板页面。</p>\n<pre><code class=\"language-bash\">$ dotnet run\n</code></pre>\n<h3>构建和部署</h3>\n<pre><code class=\"language-bash\">$ dotnet publish -c release -o dist\n</code></pre>\n<p>入口文件会构建到 <code>dist/wwwroot</code> 目录中，你可以自由部署到不同环境中进行引用。</p>\n<h3>安装组件</h3>\n<pre><code class=\"language-bash\">$ dotnet add package AntDesign\n</code></pre>\n<h3>注册依赖</h3>\n<p>在 <code>Startup.cs</code> 文件中注册 AntDesign 服务</p>\n<pre><code class=\"language-cs\">public void ConfigureServices(IServiceCollection services)\n{\n  ...\n  services.AddAntDesign();\n}\n</code></pre>\n<ul>\n<li><p>在 <code>_Imports.razor</code> 中加入命名空间</p>\n<pre><code>@using AntDesign\n</code></pre>\n</li>\n<li><p>为了动态地显示弹出组件，需要在 <code>App.razor</code> 中添加一个 <code>&lt;AntContainer /&gt;</code> 组件。</p>\n<pre><code>&lt;Router AppAssembly=&quot;@typeof(MainLayout).Assembly&quot;&gt;\n    &lt;Found Context=&quot;routeData&quot;&gt;\n        &lt;RouteView RouteData=&quot;routeData&quot; DefaultLayout=&quot;@typeof(MainLayout)&quot; /&gt;\n    &lt;/Found&gt;\n    &lt;NotFound&gt;\n        &lt;LayoutView Layout=&quot;@typeof(MainLayout)&quot;&gt;\n            &lt;Result Status=&quot;404&quot; /&gt;\n        &lt;/LayoutView&gt;\n    &lt;/NotFound&gt;\n&lt;/Router&gt;\n\n&lt;AntContainer /&gt;   &lt;-- 在这里添加 ✨\n</code></pre>\n</li>\n<li><p>最后就可以在<code>.razor</code>组件中引用啦！</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;Button Type=&quot;primary&quot;&gt;Primary&lt;/Button&gt;\n</code></pre>\n<h3>指定样式/脚本自动引入位置</h3>\n<p>自 0.17.0 本版开始，AntDesign Blazor 组件库利用 <a href=\"https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/startup?view=aspnetcore-8.0#javascript-initializers\"><code>JavaScript initializers</code></a> 支持自动引入样式和脚本。其中 CSS 默认引入到 页面原有 <code>&lt;link&gt;</code> 元素的之前，而 JS 默认引入到所有 <code>&lt;script&gt;</code> 元素之前。如果需要指定位置，只需在 html 或者 App.razor 中指定位置加入 <code>&lt;link  antblazor-css&gt;</code> 或 <code>&lt;script antblazor-js&gt;&lt;/script&gt;</code>，会自动引入到这两个元素之前。</p>\n<pre><code class=\"language-html\">  ...\n  &lt;link href=&quot;_content/AntDesign/css/ant-design-blazor.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- 自动引入到这里 --&gt;\n  &lt;link antblazor-css /&gt;\n\n  ...\n\n  &lt;script src=&quot;_content/AntDesign/js/ant-design-blazor.js&quot;&gt;&lt;/script&gt; &lt;!-- 自动引入到这里 --&gt;\n  &lt;script antblazor-js&gt;&lt;/script&gt;\n  ...\n</code></pre>\n<h4>禁用启动器</h4>\n<p>当有特殊情况不想自动导入 JS 或者样式时，可以选择禁用自动导入，并手动导入。</p>\n<p>在入口 HTML 文件上任意元素使用 <code>[no-antblazor-js]</code> 标签可禁用自动导入JS，使用 <code>[no-antblazor-css]</code> 可禁用自动导入CSS。</p>\n<pre><code class=\"language-css\">  &lt;meta no-antblazor-js no-antblazor-css /&gt;\n  &lt;link href=&quot;_content/AntDesign/css/ant-design-blazor.css&quot; rel=&quot;stylesheet&quot;&gt;\n  &lt;script src=&quot;_content/AntDesign/js/ant-design-blazor.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n"
}