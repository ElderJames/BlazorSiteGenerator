{
  "Order": 4.1,
  "Title": "本地化",
  "Html": "<p>本文档站点的本地化基于 AntDesign.Extensions.Localization 类库实现，主要提供可交互本地化服务，能够集成官方和第三方的本地化提供者实现在运行时无刷新切换语言。另外还实现了简单的嵌入 JSON 提供者。</p>\n<h2>安装</h2>\n<pre><code class=\"language-shell\">dotnet add package AntDesign.Extensions.Localization\n</code></pre>\n<h3>使用可交互本地化组件</h3>\n<ul>\n<li><p>在 <code>Program.cs</code> 文件中添加以下代码：</p>\n<pre><code class=\"language-csharp\">builder.Services.AddInteractiveStringLocalizer();\nservices.AddLocalization(options =&gt;\n{\n    options.ResourcesPath = &quot;Resources&quot;;\n});\n\n</code></pre>\n</li>\n<li><p>在项目的 <code>Resources</code> 目录下创建多语言文件，格式为 <code>{ResourceName}.{language}.resx</code>，例如 <code>Index.en-US.resx</code> 和 <code>Index.zh-CN.resx</code>。</p>\n<p>Index.en-US.resx:</p>\n<table>\n<thead>\n<tr>\n<th>键</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Hello</td>\n<td>Hello!</td>\n</tr>\n<tr>\n<td>Goodbye</td>\n<td>Goodbye!</td>\n</tr>\n</tbody>\n</table>\n<p>Index.zh-CN.resx:</p>\n<table>\n<thead>\n<tr>\n<th>键</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Hello</td>\n<td>Hello!</td>\n</tr>\n<tr>\n<td>Goodbye</td>\n<td>Goodbye!</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p>要注意的是，<code>IStringLocalizer&lt;T&gt;</code> 需要指定泛型类型参数作为 resx 文件的定位，因此需要确保资源文件有对应的公开的类型。或如下手动调整 csproj 文件：</p>\n<pre><code class=\"language-xml\">  &lt;ItemGroup&gt;\n    &lt;Compile Update=&quot;Resources\\Resources.Designer.cs&quot;&gt;\n      &lt;DesignTime&gt;True&lt;/DesignTime&gt;\n      &lt;AutoGen&gt;True&lt;/AutoGen&gt;\n      &lt;DependentUpon&gt;Resources.resx&lt;/DependentUpon&gt;\n    &lt;/Compile&gt;\n  &lt;/ItemGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;EmbeddedResource Update=&quot;Resources\\Resources.resx&quot;&gt;\n      &lt;Generator&gt;PublicResXFileCodeGenerator&lt;/Generator&gt;\n      &lt;LastGenOutput&gt;Resources.Designer.cs&lt;/LastGenOutput&gt;\n    &lt;/EmbeddedResource&gt;\n  &lt;/ItemGroup&gt;\n</code></pre>\n<ul>\n<li><p>使用时在 razor 注入 IStringLocalizer<T> 服务，例如：</p>\n<pre><code class=\"language-html\">@inject IStringLocalizer&lt;Index&gt; localizer\n\n&lt;p&gt;@localizer[&quot;Hello&quot;]&lt;/p&gt;\n&lt;p&gt;@localizer[&quot;Goodbye&quot;]&lt;/p&gt;\n</code></pre>\n</li>\n<li><p>在需要刷新语言的页面订阅语言变更事件，即可切换 UI 上的语言</p>\n<pre><code class=\"language-html\">@implements IDisposable\n@inject ILocalizationService LocalizationService\n\n&lt;Button OnClick=&quot;()=&gt;LocalizationService.SetLanguage(&quot;en-US&quot;)&quot; &gt;English&lt;/Button&gt;\n&lt;Button OnClick=&quot;()=&gt;LocalizationService.SetLanguage(&quot;zh-CN&quot;)&quot; &gt;中文&lt;/Button&gt;\n\n@code {\n\n    protected override void OnInitialized()\n    {\n        LocalizationService.LanguageChanged += OnLanguageChanged;\n    }\n    private void OnLanguageChanged(object sender, CultureInfo args)\n    {\n        InvokeAsync(StateHasChanged);\n    }\n    public void Dispose()\n    {\n        LocalizationService.LanguageChanged -= OnLanguageChanged;\n    }\n}\n</code></pre>\n</li>\n<li><p>需要使用第三方 Localization 提供者，或者其他配置，可参考 <a href=\"https://learn.microsoft.com/zh-cn/aspnet/core/blazor/globalization-localization?view=aspnetcore-8.0&amp;WT.mc_id=DT-MVP-5003987\">官方文档</a>。</p>\n</li>\n</ul>\n<h3>表单验证消息的本地化</h3>\n<p>Form 组件的默认验证器是 <a href=\"https://learn.microsoft.com/en-us/aspnet/core/blazor/forms/validation?view=aspnetcore-8.0&amp;WT.mc_id=DT-MVP-5003987#nested-models-collection-types-and-complex-types\">ObjectGraphDataAnnotationsValidator</a>，支持<a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/make-content-localizable?view=aspnetcore-8.0&amp;WT.mc_id=DT-MVP-5003987#dataannotations-localization\"> DataAnnotations 的本地化</a>。</p>\n<p>示例：<a href=\"https://antblazor.com/en-US/components/form#components-form-demo-localization\">Form 表单 - 本地化</a></p>\n<p>注意：暂不支持 AntDesign locales 中的验证信息配置。</p>\n<h3>DisplayAttribute 支持本地化</h3>\n<p>组件中有部分 UI 绑定利用了实体模型或者枚举类型的 DisplayAttribute 特性用作 Label 显示，如 FormItem、EnumSelect、EnumRadioGroup、EnumCheckboxGroup 等。</p>\n<pre><code class=\"language-cs\">  public class Model\n  {\n      [Display(Name = nameof(Resources.App.UserName), ResourceType = typeof(Resources.App))]\n      public string Username { get; set; }\n  }\n\n  public enum Province\n  {\n      [Display(Name = nameof(Resources.App.Shanghai), ResourceType = typeof(Resources.App))]\n      Shanghai,\n\n      Jiangsu\n  }\n</code></pre>\n<h3>使用简单嵌入 JSON 提供者</h3>\n<p>虽然我们推荐官方的本地化方案，但是也可以用本组件文档站点的方案，利用简单嵌入 JSON 提供者实现多语言。需要注意的是，它仅支持直接注入 IStringLocalizer，不支持其泛型，本地化文件也仅支持单一文件。</p>\n<ul>\n<li><p>在 <code>Program.cs</code> 文件中添加以下代码，此方法内部已调用 <code>AddInteractiveStringLocalizer</code>。</p>\n<pre><code class=\"language-csharp\">builder.Services.AddSimpleEmbeddedJsonLocalization(options =&gt;\n{\n    options.ResourcesPath = &quot;Resources&quot;;\n});\n</code></pre>\n</li>\n<li><p>在项目的 <code>Resources</code> 目录下创建多语言文件，格式为 <code>{language}.json</code>，例如 <code>en-US.json</code> 和 <code>zh-CN.json</code>。</p>\n<pre><code class=\"language-json\">// en-US.json\n{\n    &quot;Hello&quot;: &quot;Hello!&quot;,\n    &quot;Goodbye&quot;: &quot;Goodbye!&quot;\n}\n\n// zh-CN.json\n{\n    &quot;Hello&quot;: &quot;你好!&quot;,\n    &quot;Goodbye&quot;: &quot;再见!&quot;\n}\n</code></pre>\n</li>\n<li><p>把JSON文件的生成操作设置为嵌入的资源</p>\n<pre><code class=\"language-xml\">  &lt;ItemGroup&gt;\n      &lt;EmbeddedResource Include=&quot;Resources\\*.json&quot; /&gt;\n  &lt;/ItemGroup&gt;\n</code></pre>\n</li>\n<li><p>使用时在 razor 注入 IStringLocalizer 服务（没有泛型），例如：</p>\n<pre><code class=\"language-razor\">@inject IStringLocalizer localizer\n\n&lt;p&gt;@localizer[&quot;Hello&quot;]&lt;/p&gt;\n&lt;p&gt;@localizer[&quot;Goodbye&quot;]&lt;/p&gt;\n</code></pre>\n</li>\n</ul>\n<h3>实现路由上的语言标识</h3>\n<p>从本站点建立之初，就实现了路由的语言标记，有如下特点：</p>\n<ol>\n<li>进入页面时可根据浏览器环境，自动在路由上添加 <code>{locale}</code> 参数，例如 <code>/en-US/Index</code>。</li>\n<li>可以根据路由上已有标识切换语言，因此要切换语言时只需跳转到对应语言的路径即可。</li>\n</ol>\n<p>以下是实现方式：</p>\n<ul>\n<li>首先，在 <code>Routes.razor</code> 文件实现 <code>Router</code> 组件的 <code>OnNavigateAsync</code> 方法，调用 <code>LocalizationService.SetLanguage</code> 方法切换语言。</li>\n</ul>\n<pre><code class=\"language-razor\">@using System.Reflection\n@using System.Globalization\n\n&lt;ConfigProvider&gt;\n    &lt;Router AppAssembly=&quot;typeof(App).Assembly&quot; OnNavigateAsync=&quot;OnNavigateAsync&quot;&gt;\n        &lt;Found Context=&quot;routeData&quot;&gt;\n            &lt;RouteView RouteData=&quot;routeData&quot; DefaultLayout=&quot;typeof(MainLayout)&quot; /&gt;\n            &lt;FocusOnNavigate RouteData=&quot;routeData&quot; Selector=&quot;h1&quot; /&gt;\n        &lt;/Found&gt;\n        &lt;NotFound&gt;\n            &lt;Result Status=&quot;404&quot; /&gt;\n        &lt;/NotFound&gt;\n    &lt;/Router&gt;\n    &lt;AntContainer /&gt;\n&lt;/ConfigProvider&gt;\n\n@inject ILocalizationService LocalizationService;\n@inject NavigationManager NavigationManager;\n@code{\n    async Task OnNavigateAsync(NavigationContext navigationContext)\n    {\n        var relativeUri = navigationContext.Path;\n        var currentCulture = LocalizationService.CurrentCulture;\n\n        var segment = relativeUri.IndexOf('/') &gt; 0 ? relativeUri.Substring(0, relativeUri.IndexOf('/')) : relativeUri;\n\n        if (string.IsNullOrWhiteSpace(segment))\n        {\n            NavigationManager.NavigateTo($&quot;{currentCulture.Name}/{relativeUri}&quot;);\n            return;\n        }\n        else\n        {\n            if (segment.IsIn(&quot;zh-CN&quot;, &quot;en-US&quot;))\n            {\n                LocalizationService.SetLanguage(CultureInfo.GetCultureInfo(segment));\n            }\n            else if (currentCulture.Name.IsIn(&quot;zh-CN&quot;, &quot;en-US&quot;))\n            {\n                NavigationManager.NavigateTo($&quot;{currentCulture.Name}/{relativeUri}&quot;);\n            }\n            else\n            {\n                NavigationManager.NavigateTo($&quot;en-US/{relativeUri}&quot;);\n                return;\n            }\n        }\n    }\n}\n</code></pre>\n<ul>\n<li>最后，给页面组件统一添加 <code>{locale}</code> 参数，使切换后的路由匹配对应的页面。</li>\n</ul>\n<pre><code class=\"language-razor\">@page &quot;/{locale}/Index&quot;\n\n@inject IStringLocalizer&lt;Index&gt; localizer\n\n&lt;p&gt;@localizer[&quot;Hello&quot;]&lt;/p&gt;\n\n@code {\n\n    [Parameter]\n    public string Locale { get; set; }\n}\n\n</code></pre>\n"
}